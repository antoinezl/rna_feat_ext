#!/usr/bin/env python

# Take a cDNA csv file and return a table with the RNA features.

# Written by Arnold Franz AKE
#aerod7710@gmail.com in April 2018
#@UMR7216 Paris Diderot

# -*- coding: utf-8 *-*-

#Loading packages
from multiprocessing import Pool, Process
import numpy as np
import pandas as pd
import math
import re
import sys
import subprocess
import rnaFeaturesLib
import argparse


#Options/Arguments parser
parser = argparse.ArgumentParser(description = "Getting Features from a cDNAtable")
#Positionnal Arguments
parser.add_argument('infile', metavar = "input_file",
 type = argparse.FileType('r'), help = 'Path (name) of the cDna_table.')
parser.add_argument('outfile', nargs = "?", default = sys.stdout, metavar = "output_file",
 type = argparse.FileType('w'), help = 'Path (name) of the cdnaFeaturesTable. Default: writing to the Stdout')

#Optional Argument
parser.add_argument('-n',
 type = int,
  help = 'specify a number of rows (random selected) to analyse from the input_file (after drop Nan rows)')

args = parser.parse_args()

#Loading Data
cdna = pd.read_csv(args.infile)


#deleting NaN_Rows
#cdna.dropna().shape #(17485,15)
cdna = cdna.dropna()
if args.n != None:
	cdna = cdna.sample(args.n)
	reindex = cdna.index.tolist()
	reindex = [str(i) for i in reindex]
	cdna = cdna.reset_index()



#P3utr_Len
#p3len = cdna['p3end']-cdna['p3start']
#utr3_len = pd.DataFrame(p3len, columns = ['utr3_len']).astype(int)
utr3_len = pd.DataFrame(rnaFeaturesLib.writeP3utr_fa(cdna), columns = ['utr3_len']).astype(int) #saving p3utrDEMO.fasta

#P5utr length
#p5len = cdna['p5end']-cdna['p5start']
#utr5_len = pd.DataFrame(p5len, columns = ['utr5_len']).astype(int)
utr5_len = pd.DataFrame(rnaFeaturesLib.writeP5utr_fa(cdna),columns = ['utr5_len']).astype(int) #saving p5utrDEMO.fasta

#Kozak_Context # TODO perhaps we will want to keep the Kozak sequence itself not only the context.
res = rnaFeaturesLib.getKozak(cdna, 10, 20)
kozak = res[0]
kozakseq = res[1]
contKozak = pd.DataFrame(kozak, columns = ['contextKozak'])	#(17485)    #Kozak_Context
sequKozak = pd.DataFrame(kozakseq, columns = ['sequenceKozak'])         #Kozak_Sequence

#get_uORF
uORFs = pd.Series(rnaFeaturesLib.get_uORF(cdna))

#get_dORF
dORFs = pd.Series(rnaFeaturesLib.get_dORF(cdna))

#Get_Folding Energy
#P5UTR
input_p5utr=open("../results/p5utrDEMO.fasta", "r+")   #recuperation fichier sotcke precedemment
input_p3utr=open("../results/p3utrDEMO.fasta", "r+")
rnaFeaturesLib.RNAfold_calcul(input_p5utr,"../results/mfep5.txt")
#rnaFeaturesLib.RNAfold_calcul(input_p3utr,"../results/mfep3.txt")
p5mfe = rnaFeaturesLib.getFoldingEnergy("../results/mfep5.txt",cdna)
#p3mfe = rnaFeaturesLib.getFoldingEnergy("../results/mfep3.txt",cdna)
input_p3utr.close()
input_p5utr.close()

#Concatenation des variables
features_tab = cdna.loc[:,['geneid','trid']]
features_tab['p3len'] = utr3_len
#features_tab['p3mfe'] = p3mfe
features_tab['p5len'] = utr5_len
features_tab['p5mfe'] = p5mfe
features_tab['uORFs'] = uORFs
features_tab['dORFs'] = dORFs
features_tab['Kozak_Context'] = contKozak
features_tab['Kozak_sequence'] = sequKozak

features_tab.index = reindex

#Sauvegarde
features_tab.to_csv(args.outfile, sep="\t", index = False)
